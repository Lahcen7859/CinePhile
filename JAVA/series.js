// ðŸ“Œ DÃ©finition des catÃ©gories de sÃ©ries et leurs endpoints sur l'API TMDb
const categories = {
    "popular-series": "tv/popular",         // SÃ©ries les plus populaires
    "top-rated-series": "tv/top_rated",     // SÃ©ries les mieux notÃ©es
    "trending-series": "trending/tv/day",   // SÃ©ries tendances du jour
    "on-air-series": "tv/on_the_air"        // SÃ©ries actuellement en diffusion
};

// ðŸ“Œ Fonction pour rÃ©cupÃ©rer et afficher les sÃ©ries d'une catÃ©gorie spÃ©cifique
function fetchSeries(categoryId, endpoint) {
    // ðŸ”¹ Construction de l'URL d'appel Ã  l'API
    const url = `https://api.themoviedb.org/3/${endpoint}?api_key=${apiKey}&language=fr-FR`;

    // ðŸ“Œ Envoi de la requÃªte Ã  l'API TMDb
    fetch(url)
        .then(response => response.json()) // ðŸ”¹ Convertit la rÃ©ponse JSON en objet JavaScript
        .then(data => { // ðŸ”¹ Une fois les donnÃ©es reÃ§ues, on exÃ©cute cette fonction
            
            // ðŸ“Œ SÃ©lectionne l'Ã©lÃ©ment HTML correspondant Ã  la catÃ©gorie
            const container = document.getElementById(categoryId);

            // âœ… VÃ©rification : Si l'Ã©lÃ©ment HTML n'existe pas, on arrÃªte le script
            if (!container) return;

            // ðŸ“Œ Initialisation d'une variable qui contiendra le HTML des sÃ©ries
            let seriesHTML = "";

            // ðŸ“Œ Parcours des 6 premiÃ¨res sÃ©ries renvoyÃ©es par l'API
            data.results.slice(0, 6).forEach(serie => {

                // ðŸ”¹ Construction de l'URL de l'affiche de la sÃ©rie
                // Si la sÃ©rie a une affiche (`poster_path`), on l'affiche
                // Sinon, on utilise une image de remplacement
                const posterUrl = serie.poster_path 
                    ? `https://image.tmdb.org/t/p/w500${serie.poster_path}` 
                    : "https://via.placeholder.com/500x750?text=Pas+de+Image"; // Image par dÃ©faut

                // ðŸ”¹ GÃ©nÃ©ration du code HTML pour chaque sÃ©rie
                seriesHTML += `
                    <div class="col-md-4 mb-4"> <!-- Chaque sÃ©rie prend 1/3 de la largeur -->
                        <div class="card text-center">
                            <img src="${posterUrl}" class="card-img-top" alt="${serie.name}"> <!-- Affiche de la sÃ©rie -->
                            <div class="card-body">
                                <a href="detailsseries.html?id=${serie.id}" class="btn btn-neon">Voir DÃ©tails</a> <!-- Bouton vers dÃ©tails -->
                            </div>
                        </div>
                    </div>
                `;
            });

            // ðŸ“Œ Injection du HTML gÃ©nÃ©rÃ© dans la page pour afficher les sÃ©ries
            container.innerHTML = seriesHTML;
        })
        .catch(error => console.error(`Erreur lors du chargement des sÃ©ries (${categoryId}) :`, error)); // ðŸš¨ Gestion des erreurs
}

// ðŸ“Œ Lorsque la page est complÃ¨tement chargÃ©e, on appelle `fetchSeries` pour chaque catÃ©gorie
document.addEventListener("DOMContentLoaded", () => {
    for (const [categoryId, endpoint] of Object.entries(categories)) {
        fetchSeries(categoryId, endpoint);
    }
});

// ðŸ“Œ Gestion du formulaire de recherche des sÃ©ries
document.getElementById("search-form").addEventListener("submit", function(event) {
    event.preventDefault(); // ðŸ”¹ EmpÃªche le rechargement de la page lors de la soumission du formulaire

    // ðŸ”¹ RÃ©cupÃ¨re la valeur de l'input de recherche et supprime les espaces inutiles
    const query = document.getElementById("search-input").value.trim();

    // âœ… VÃ©rification : Si la recherche est vide, on ne fait rien
    if (!query) return;

    // ðŸ“Œ Redirige vers la page de recherche des sÃ©ries avec la requÃªte dans l'URL
    window.location.href = `rechercheseries.html?query=${encodeURIComponent(query)}`;
});
